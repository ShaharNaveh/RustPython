//! Python opcode implementation. Currently aligned with cpython 3.13.9

// This file is generated by scripts/gen_opcodes.py
// Do not edit!

use super::oparg::{
    Arg, BinaryOperatorOparg, CallIntrinsic1Oparg, CallIntrinsic2Oparg, ConstIdxOparg, DeltaOparg,
    NameIdxOparg, Oparg, RaiseVarArgsOparg, ResumeOparg, UnpackExOparg,
};

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(u8)]
pub enum RealInstruction {
    BeforeAsyncWith = 1,
    BeforeWith = 2,
    BinaryOp(Arg<BinaryOperatorOparg>) = 45,
    BinaryOpAddFloat = 150,
    BinaryOpAddInt = 151,
    BinaryOpAddUnicode = 152,
    BinaryOpInplaceAddUnicode = 3,
    BinaryOpMultiplyFloat = 153,
    BinaryOpMultiplyInt = 154,
    BinaryOpSubtractFloat = 155,
    BinaryOpSubtractInt = 156,
    BinarySlice = 4,
    BinarySubscr = 5,
    BinarySubscrDict = 157,
    BinarySubscrGetitem = 158,
    BinarySubscrListInt = 159,
    BinarySubscrStrInt = 160,
    BinarySubscrTupleInt = 161,
    BuildConstKeyMap(Arg<Oparg>) = 46,
    BuildList(Arg<Oparg>) = 47,
    BuildMap(Arg<Oparg>) = 48,
    BuildSet(Arg<Oparg>) = 49,
    BuildSlice(Arg<Oparg>) = 50,
    BuildString(Arg<Oparg>) = 51,
    BuildTuple(Arg<Oparg>) = 52,
    Cache = 0,
    Call(Arg<Oparg>) = 53,
    CallAllocAndEnterInit(Arg<Oparg>) = 162,
    CallBoundMethodExactArgs(Arg<Oparg>) = 163,
    CallBoundMethodGeneral(Arg<Oparg>) = 164,
    CallBuiltinClass(Arg<Oparg>) = 165,
    CallBuiltinFast(Arg<Oparg>) = 166,
    CallBuiltinFastWithKeywords(Arg<Oparg>) = 167,
    CallBuiltinO(Arg<Oparg>) = 168,
    CallFunctionEx(Arg<Oparg>) = 54,
    CallIntrinsic1(Arg<CallIntrinsic1Oparg>) = 55,
    CallIntrinsic2(Arg<CallIntrinsic2Oparg>) = 56,
    CallIsinstance(Arg<Oparg>) = 169,
    CallKw(Arg<Oparg>) = 57,
    CallLen(Arg<Oparg>) = 170,
    CallListAppend(Arg<Oparg>) = 171,
    CallMethodDescriptorFast(Arg<Oparg>) = 172,
    CallMethodDescriptorFastWithKeywords(Arg<Oparg>) = 173,
    CallMethodDescriptorNoargs(Arg<Oparg>) = 174,
    CallMethodDescriptorO(Arg<Oparg>) = 175,
    CallNonPyGeneral(Arg<Oparg>) = 176,
    CallPyExactArgs(Arg<Oparg>) = 177,
    CallPyGeneral(Arg<Oparg>) = 178,
    CallStr1(Arg<Oparg>) = 179,
    CallTuple1(Arg<Oparg>) = 180,
    CallType1(Arg<Oparg>) = 181,
    CheckEgMatch = 6,
    CheckExcMatch = 7,
    CleanupThrow = 8,
    CompareOp(Arg<Oparg>) = 58,
    CompareOpFloat(Arg<Oparg>) = 182,
    CompareOpInt(Arg<Oparg>) = 183,
    CompareOpStr(Arg<Oparg>) = 184,
    ContainsOp(Arg<Oparg>) = 59,
    ContainsOpDict(Arg<Oparg>) = 185,
    ContainsOpSet(Arg<Oparg>) = 186,
    ConvertValue(Arg<Oparg>) = 60,
    Copy(Arg<Oparg>) = 61,
    CopyFreeVars(Arg<Oparg>) = 62,
    DeleteAttr(Arg<NameIdxOparg>) = 63,
    DeleteDeref(Arg<Oparg>) = 64,
    DeleteFast(Arg<Oparg>) = 65,
    DeleteGlobal(Arg<NameIdxOparg>) = 66,
    DeleteName(Arg<NameIdxOparg>) = 67,
    DeleteSubscr = 9,
    DictMerge(Arg<Oparg>) = 68,
    DictUpdate(Arg<Oparg>) = 69,
    EndAsyncFor = 10,
    EndFor = 11,
    EndSend = 12,
    EnterExecutor(Arg<Oparg>) = 70,
    ExitInitCheck = 13,
    ExtendedArg(Arg<Oparg>) = 71,
    FormatSimple = 14,
    FormatWithSpec = 15,
    ForIter(Arg<DeltaOparg>) = 72,
    ForIterGen(Arg<Oparg>) = 187,
    ForIterList(Arg<DeltaOparg>) = 188,
    ForIterRange(Arg<DeltaOparg>) = 189,
    ForIterTuple(Arg<DeltaOparg>) = 190,
    GetAiter = 16,
    GetAnext = 18,
    GetAwaitable(Arg<Oparg>) = 73,
    GetIter = 19,
    GetLen = 20,
    GetYieldFromIter = 21,
    ImportFrom(Arg<NameIdxOparg>) = 74,
    ImportName(Arg<NameIdxOparg>) = 75,
    InstrumentedCall(Arg<Oparg>) = 244,
    InstrumentedCallFunctionEx = 246,
    InstrumentedCallKw(Arg<Oparg>) = 245,
    InstrumentedEndFor = 237,
    InstrumentedEndSend = 238,
    InstrumentedForIter(Arg<Oparg>) = 243,
    InstrumentedInstruction = 247,
    InstrumentedJumpBackward(Arg<Oparg>) = 249,
    InstrumentedJumpForward(Arg<Oparg>) = 248,
    InstrumentedLine = 254,
    InstrumentedLoadSuperAttr(Arg<Oparg>) = 242,
    InstrumentedPopJumpIfFalse(Arg<Oparg>) = 251,
    InstrumentedPopJumpIfNone(Arg<Oparg>) = 252,
    InstrumentedPopJumpIfNotNone(Arg<Oparg>) = 253,
    InstrumentedPopJumpIfTrue(Arg<Oparg>) = 250,
    InstrumentedResume(Arg<Oparg>) = 236,
    InstrumentedReturnConst(Arg<ConstIdxOparg>) = 240,
    InstrumentedReturnValue = 239,
    InstrumentedYieldValue(Arg<Oparg>) = 241,
    InterpreterExit = 22,
    IsOp(Arg<Oparg>) = 76,
    JumpBackward(Arg<DeltaOparg>) = 77,
    JumpBackwardNoInterrupt(Arg<DeltaOparg>) = 78,
    JumpForward(Arg<DeltaOparg>) = 79,
    ListAppend(Arg<Oparg>) = 80,
    ListExtend(Arg<Oparg>) = 81,
    LoadAssertionError = 23,
    LoadAttr(Arg<NameIdxOparg>) = 82,
    LoadAttrClass(Arg<Oparg>) = 191,
    LoadAttrGetattributeOverridden(Arg<NameIdxOparg>) = 192,
    LoadAttrInstanceValue(Arg<Oparg>) = 193,
    LoadAttrMethodLazyDict(Arg<Oparg>) = 194,
    LoadAttrMethodNoDict(Arg<Oparg>) = 195,
    LoadAttrMethodWithValues(Arg<Oparg>) = 196,
    LoadAttrModule(Arg<Oparg>) = 197,
    LoadAttrNondescriptorNoDict(Arg<Oparg>) = 198,
    LoadAttrNondescriptorWithValues(Arg<Oparg>) = 199,
    LoadAttrProperty(Arg<Oparg>) = 200,
    LoadAttrSlot(Arg<Oparg>) = 201,
    LoadAttrWithHint(Arg<NameIdxOparg>) = 202,
    LoadBuildClass = 24,
    LoadConst(Arg<ConstIdxOparg>) = 83,
    LoadDeref(Arg<Oparg>) = 84,
    LoadFast(Arg<Oparg>) = 85,
    LoadFastAndClear(Arg<Oparg>) = 86,
    LoadFastCheck(Arg<Oparg>) = 87,
    LoadFastLoadFast(Arg<Oparg>) = 88,
    LoadFromDictOrDeref(Arg<Oparg>) = 89,
    LoadFromDictOrGlobals(Arg<NameIdxOparg>) = 90,
    LoadGlobal(Arg<NameIdxOparg>) = 91,
    LoadGlobalBuiltin(Arg<Oparg>) = 203,
    LoadGlobalModule(Arg<Oparg>) = 204,
    LoadLocals = 25,
    LoadName(Arg<NameIdxOparg>) = 92,
    LoadSuperAttr(Arg<NameIdxOparg>) = 93,
    LoadSuperAttrAttr(Arg<NameIdxOparg>) = 205,
    LoadSuperAttrMethod(Arg<NameIdxOparg>) = 206,
    MakeCell(Arg<Oparg>) = 94,
    MakeFunction = 26,
    MapAdd(Arg<Oparg>) = 95,
    MatchClass(Arg<Oparg>) = 96,
    MatchKeys = 27,
    MatchMapping = 28,
    MatchSequence = 29,
    Nop = 30,
    PopExcept = 31,
    PopJumpIfFalse(Arg<DeltaOparg>) = 97,
    PopJumpIfNone(Arg<DeltaOparg>) = 98,
    PopJumpIfNotNone(Arg<DeltaOparg>) = 99,
    PopJumpIfTrue(Arg<DeltaOparg>) = 100,
    PopTop = 32,
    PushExcInfo = 33,
    PushNull = 34,
    RaiseVarargs(Arg<RaiseVarArgsOparg>) = 101,
    Reraise(Arg<Oparg>) = 102,
    Reserved = 17,
    Resume(Arg<ResumeOparg>) = 149,
    ResumeCheck = 207,
    ReturnConst(Arg<ConstIdxOparg>) = 103,
    ReturnGenerator = 35,
    ReturnValue = 36,
    Send(Arg<DeltaOparg>) = 104,
    SendGen(Arg<Oparg>) = 208,
    SetupAnnotations = 37,
    SetAdd(Arg<Oparg>) = 105,
    SetFunctionAttribute(Arg<Oparg>) = 106,
    SetUpdate(Arg<Oparg>) = 107,
    StoreAttr(Arg<NameIdxOparg>) = 108,
    StoreAttrInstanceValue = 209,
    StoreAttrSlot = 210,
    StoreAttrWithHint(Arg<NameIdxOparg>) = 211,
    StoreDeref(Arg<Oparg>) = 109,
    StoreFast(Arg<Oparg>) = 110,
    StoreFastLoadFast(Arg<Oparg>) = 111,
    StoreFastStoreFast(Arg<Oparg>) = 112,
    StoreGlobal(Arg<NameIdxOparg>) = 113,
    StoreName(Arg<NameIdxOparg>) = 114,
    StoreSlice = 38,
    StoreSubscr = 39,
    StoreSubscrDict = 212,
    StoreSubscrListInt = 213,
    Swap(Arg<Oparg>) = 115,
    ToBool = 40,
    ToBoolAlwaysTrue = 214,
    ToBoolBool = 215,
    ToBoolInt = 216,
    ToBoolList = 217,
    ToBoolNone = 218,
    ToBoolStr = 219,
    UnaryInvert = 41,
    UnaryNegative = 42,
    UnaryNot = 43,
    UnpackEx(Arg<UnpackExOparg>) = 116,
    UnpackSequence(Arg<Oparg>) = 117,
    UnpackSequenceList(Arg<Oparg>) = 220,
    UnpackSequenceTuple(Arg<Oparg>) = 221,
    UnpackSequenceTwoTuple(Arg<Oparg>) = 222,
    WithExceptStart = 44,
    YieldValue(Arg<Oparg>) = 118,
}

impl RealInstruction {
    /// Whether opcode ID have 'HAS_ARG_FLAG' set.
    #[must_use]
    pub const fn has_arg(&self) -> bool {
        matches!(
            *self,
            Self::BinaryOp(_)
                | Self::BuildConstKeyMap(_)
                | Self::BuildList(_)
                | Self::BuildMap(_)
                | Self::BuildSet(_)
                | Self::BuildSlice(_)
                | Self::BuildString(_)
                | Self::BuildTuple(_)
                | Self::Call(_)
                | Self::CallAllocAndEnterInit(_)
                | Self::CallBoundMethodExactArgs(_)
                | Self::CallBoundMethodGeneral(_)
                | Self::CallBuiltinClass(_)
                | Self::CallBuiltinFast(_)
                | Self::CallBuiltinFastWithKeywords(_)
                | Self::CallBuiltinO(_)
                | Self::CallFunctionEx(_)
                | Self::CallIntrinsic1(_)
                | Self::CallIntrinsic2(_)
                | Self::CallIsinstance(_)
                | Self::CallKw(_)
                | Self::CallLen(_)
                | Self::CallListAppend(_)
                | Self::CallMethodDescriptorFast(_)
                | Self::CallMethodDescriptorFastWithKeywords(_)
                | Self::CallMethodDescriptorNoargs(_)
                | Self::CallMethodDescriptorO(_)
                | Self::CallNonPyGeneral(_)
                | Self::CallPyExactArgs(_)
                | Self::CallPyGeneral(_)
                | Self::CallStr1(_)
                | Self::CallTuple1(_)
                | Self::CallType1(_)
                | Self::CompareOp(_)
                | Self::CompareOpFloat(_)
                | Self::CompareOpInt(_)
                | Self::CompareOpStr(_)
                | Self::ContainsOp(_)
                | Self::ContainsOpDict(_)
                | Self::ContainsOpSet(_)
                | Self::ConvertValue(_)
                | Self::Copy(_)
                | Self::CopyFreeVars(_)
                | Self::DeleteAttr(_)
                | Self::DeleteDeref(_)
                | Self::DeleteFast(_)
                | Self::DeleteGlobal(_)
                | Self::DeleteName(_)
                | Self::DictMerge(_)
                | Self::DictUpdate(_)
                | Self::EnterExecutor(_)
                | Self::ExtendedArg(_)
                | Self::ForIter(_)
                | Self::ForIterGen(_)
                | Self::ForIterList(_)
                | Self::ForIterRange(_)
                | Self::ForIterTuple(_)
                | Self::GetAwaitable(_)
                | Self::ImportFrom(_)
                | Self::ImportName(_)
                | Self::InstrumentedCall(_)
                | Self::InstrumentedCallKw(_)
                | Self::InstrumentedForIter(_)
                | Self::InstrumentedJumpBackward(_)
                | Self::InstrumentedJumpForward(_)
                | Self::InstrumentedLoadSuperAttr(_)
                | Self::InstrumentedPopJumpIfFalse(_)
                | Self::InstrumentedPopJumpIfNone(_)
                | Self::InstrumentedPopJumpIfNotNone(_)
                | Self::InstrumentedPopJumpIfTrue(_)
                | Self::InstrumentedResume(_)
                | Self::InstrumentedReturnConst(_)
                | Self::InstrumentedYieldValue(_)
                | Self::IsOp(_)
                | Self::JumpBackward(_)
                | Self::JumpBackwardNoInterrupt(_)
                | Self::JumpForward(_)
                | Self::ListAppend(_)
                | Self::ListExtend(_)
                | Self::LoadAttr(_)
                | Self::LoadAttrClass(_)
                | Self::LoadAttrGetattributeOverridden(_)
                | Self::LoadAttrInstanceValue(_)
                | Self::LoadAttrMethodLazyDict(_)
                | Self::LoadAttrMethodNoDict(_)
                | Self::LoadAttrMethodWithValues(_)
                | Self::LoadAttrModule(_)
                | Self::LoadAttrNondescriptorNoDict(_)
                | Self::LoadAttrNondescriptorWithValues(_)
                | Self::LoadAttrProperty(_)
                | Self::LoadAttrSlot(_)
                | Self::LoadAttrWithHint(_)
                | Self::LoadConst(_)
                | Self::LoadDeref(_)
                | Self::LoadFast(_)
                | Self::LoadFastAndClear(_)
                | Self::LoadFastCheck(_)
                | Self::LoadFastLoadFast(_)
                | Self::LoadFromDictOrDeref(_)
                | Self::LoadFromDictOrGlobals(_)
                | Self::LoadGlobal(_)
                | Self::LoadGlobalBuiltin(_)
                | Self::LoadGlobalModule(_)
                | Self::LoadName(_)
                | Self::LoadSuperAttr(_)
                | Self::LoadSuperAttrAttr(_)
                | Self::LoadSuperAttrMethod(_)
                | Self::MakeCell(_)
                | Self::MapAdd(_)
                | Self::MatchClass(_)
                | Self::PopJumpIfFalse(_)
                | Self::PopJumpIfNone(_)
                | Self::PopJumpIfNotNone(_)
                | Self::PopJumpIfTrue(_)
                | Self::RaiseVarargs(_)
                | Self::Reraise(_)
                | Self::Resume(_)
                | Self::ReturnConst(_)
                | Self::Send(_)
                | Self::SendGen(_)
                | Self::SetAdd(_)
                | Self::SetFunctionAttribute(_)
                | Self::SetUpdate(_)
                | Self::StoreAttr(_)
                | Self::StoreAttrWithHint(_)
                | Self::StoreDeref(_)
                | Self::StoreFast(_)
                | Self::StoreFastLoadFast(_)
                | Self::StoreFastStoreFast(_)
                | Self::StoreGlobal(_)
                | Self::StoreName(_)
                | Self::Swap(_)
                | Self::UnpackEx(_)
                | Self::UnpackSequence(_)
                | Self::UnpackSequenceList(_)
                | Self::UnpackSequenceTuple(_)
                | Self::UnpackSequenceTwoTuple(_)
                | Self::YieldValue(_)
        )
    }

    /// Whether opcode ID have 'HAS_CONST_FLAG' set.
    #[must_use]
    pub const fn has_const(&self) -> bool {
        matches!(
            *self,
            Self::InstrumentedReturnConst(_) | Self::LoadConst(_) | Self::ReturnConst(_)
        )
    }

    /// Whether opcode ID have 'HAS_PURE_FLAG' set.
    #[must_use]
    pub const fn has_exc(&self) -> bool {
        matches!(
            *self,
            Self::Copy(_)
                | Self::EndFor
                | Self::EndSend
                | Self::InstrumentedLine
                | Self::LoadConst(_)
                | Self::LoadFast(_)
                | Self::Nop
                | Self::PopTop
                | Self::PushNull
                | Self::Swap(_)
                | Self::UnaryNot
        )
    }

    /// Whether opcode ID have 'HAS_FREE_FLAG' set.
    #[must_use]
    pub const fn has_free(&self) -> bool {
        matches!(
            *self,
            Self::DeleteDeref(_)
                | Self::LoadDeref(_)
                | Self::LoadFromDictOrDeref(_)
                | Self::MakeCell(_)
                | Self::StoreDeref(_)
        )
    }

    /// Whether opcode ID have 'HAS_JUMP_FLAG' set.
    #[must_use]
    pub const fn has_jump(&self) -> bool {
        matches!(
            *self,
            Self::ForIter(_)
                | Self::ForIterList(_)
                | Self::ForIterRange(_)
                | Self::ForIterTuple(_)
                | Self::JumpBackward(_)
                | Self::JumpBackwardNoInterrupt(_)
                | Self::JumpForward(_)
                | Self::PopJumpIfFalse(_)
                | Self::PopJumpIfNone(_)
                | Self::PopJumpIfNotNone(_)
                | Self::PopJumpIfTrue(_)
                | Self::Send(_)
        )
    }

    /// Whether opcode ID have 'HAS_LOCAL_FLAG' set.
    #[must_use]
    pub const fn has_local(&self) -> bool {
        matches!(
            *self,
            Self::BinaryOpInplaceAddUnicode
                | Self::DeleteFast(_)
                | Self::LoadFast(_)
                | Self::LoadFastAndClear(_)
                | Self::LoadFastCheck(_)
                | Self::LoadFastLoadFast(_)
                | Self::StoreFast(_)
                | Self::StoreFastLoadFast(_)
                | Self::StoreFastStoreFast(_)
        )
    }

    /// Whether opcode ID have 'HAS_NAME_FLAG' set.
    #[must_use]
    pub const fn has_name(&self) -> bool {
        matches!(
            *self,
            Self::DeleteAttr(_)
                | Self::DeleteGlobal(_)
                | Self::DeleteName(_)
                | Self::ImportFrom(_)
                | Self::ImportName(_)
                | Self::LoadAttr(_)
                | Self::LoadAttrGetattributeOverridden(_)
                | Self::LoadAttrWithHint(_)
                | Self::LoadFromDictOrGlobals(_)
                | Self::LoadGlobal(_)
                | Self::LoadName(_)
                | Self::LoadSuperAttr(_)
                | Self::LoadSuperAttrAttr(_)
                | Self::LoadSuperAttrMethod(_)
                | Self::StoreAttr(_)
                | Self::StoreAttrWithHint(_)
                | Self::StoreGlobal(_)
                | Self::StoreName(_)
        )
    }
}

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(u16)]
pub enum PseudoInstruction {
    Jump(Arg<DeltaOparg>) = 256,
    JumpNoInterrupt(Arg<DeltaOparg>) = 257,
    LoadClosure(Arg<Oparg>) = 258,
    LoadMethod(Arg<NameIdxOparg>) = 259,
    LoadSuperMethod(Arg<NameIdxOparg>) = 260,
    LoadZeroSuperAttr(Arg<NameIdxOparg>) = 261,
    LoadZeroSuperMethod(Arg<NameIdxOparg>) = 262,
    PopBlock = 263,
    SetupCleanup = 264,
    SetupFinally = 265,
    SetupWith = 266,
    StoreFastMaybeNull(Arg<Oparg>) = 267,
}

impl PseudoInstruction {
    /// Whether opcode ID have 'HAS_ARG_FLAG' set.
    #[must_use]
    pub const fn has_arg(&self) -> bool {
        matches!(
            *self,
            Self::Jump(_)
                | Self::JumpNoInterrupt(_)
                | Self::LoadClosure(_)
                | Self::LoadMethod(_)
                | Self::LoadSuperMethod(_)
                | Self::LoadZeroSuperAttr(_)
                | Self::LoadZeroSuperMethod(_)
                | Self::StoreFastMaybeNull(_)
        )
    }

    /// Whether opcode ID have 'HAS_CONST_FLAG' set.
    #[must_use]
    pub const fn has_const(&self) -> bool {
        false
    }

    /// Whether opcode ID have 'HAS_PURE_FLAG' set.
    #[must_use]
    pub const fn has_exc(&self) -> bool {
        matches!(
            *self,
            Self::LoadClosure(_)
                | Self::PopBlock
                | Self::SetupCleanup
                | Self::SetupFinally
                | Self::SetupWith
        )
    }

    /// Whether opcode ID have 'HAS_FREE_FLAG' set.
    #[must_use]
    pub const fn has_free(&self) -> bool {
        false
    }

    /// Whether opcode ID have 'HAS_JUMP_FLAG' set.
    #[must_use]
    pub const fn has_jump(&self) -> bool {
        matches!(*self, Self::Jump(_) | Self::JumpNoInterrupt(_))
    }

    /// Whether opcode ID have 'HAS_LOCAL_FLAG' set.
    #[must_use]
    pub const fn has_local(&self) -> bool {
        matches!(*self, Self::LoadClosure(_) | Self::StoreFastMaybeNull(_))
    }

    /// Whether opcode ID have 'HAS_NAME_FLAG' set.
    #[must_use]
    pub const fn has_name(&self) -> bool {
        matches!(
            *self,
            Self::LoadMethod(_)
                | Self::LoadSuperMethod(_)
                | Self::LoadZeroSuperAttr(_)
                | Self::LoadZeroSuperMethod(_)
        )
    }
}

const _: () = assert!(std::mem::size_of::<RealInstruction>() == 1);
