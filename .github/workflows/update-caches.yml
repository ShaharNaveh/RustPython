name: Update Actions Caches

permissions:
  contents: read

on:
  # Manually
  workflow_dispatch:
  # On PR merge
  push:
    branches:
      - main
  # After nightly release
  schedule:
    - cron: "0 1 * * *"

# Environment variables must be kept in sync with all workflows that defines them.
env:
  CARGO_INCREMENTAL: 0
  CARGO_PROFILE_TEST_DEBUG: 0
  CARGO_PROFILE_DEV_DEBUG: 0
  # If nightly is breaking CI, modify this variable to target a specific nightly version.
  NIGHTLY_TOOLCHAIN: nightly

jobs:
  build-caches:
    name: Build Caches
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            toolchain: stable
            target: ""
          - os: macos-latest
            toolchain: stable
            target: ""
          # TODO: Switch to `windows-latest` on 2025/09/30
          - os: windows-2025 
            toolchain: stable
            target: ""

    steps:
      # prepare the date - used to rebuild the cache daily to update the cache for rust nightly, even if no change on RustPython dependencies
      - name: Get Date
        id: get-date
        run: |
          echo "date=$(/bin/date -u "+%Y%m%d")" >> $GITHUB_OUTPUT
        shell: bash

      - name: Checkout RustPython main branch
        uses: actions/checkout@v5.0.0
        with:
          repository: RustPython/RustPython
          ref: main

      - name: Setup Rust
        id: rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.toolchain }}
          target: ${{ matrix.target }}

      # prepare the lockfile - to have a complete image of the dependencies on the current platform
      - name: Create lock file
        run: cargo update

      - name: Install RustPython dependencies (Linux)
        uses: ./.github/actions/install-linux-deps

      - name: Install RustPython dependencies (MacOS)
        uses: ./.github/actions/install-macos-deps

      - name: Install RustPython dependencies (Windows)
        uses: ./.github/actions/install-windows-deps

      # Fetch the cache using the complete key - to avoid rebuilding the cache if nothing changed
      - uses: actions/cache/restore@v4.2.4
        id: cache
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.toolchain }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.toml') }}-${{ hashFiles('Cargo.lock') }}-${{ steps.get-date.outputs.date }}

      # Build RustPython for the dev profile, used by check, doc, ...
      - name: Build dev cache
        if: steps.cache.outputs.cache-hit != 'true'
        run: cargo build --profile dev --package rustpython

      # Build RustPython for the test profile, used by test
      - name: Build test cache
        if: steps.cache.outputs.cache-hit != 'true'
        run: cargo build --profile test --package rustpython

      - name: Save cache
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4.2.4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.toolchain }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.toml') }}-${{ hashFiles('Cargo.lock') }}-${{ steps.get-date.outputs.date }}
